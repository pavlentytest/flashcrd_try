type: edu
files:
- name: src/flashcards/Main.kt
  visible: true
  text: |
    package flashcards

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: "import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;\nimport\
    \ org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.BeforeClass;\n\nimport java.util.Arrays;\nimport java.util.List;\n\
    \npublic class FlashcardsTest extends StageTest<String> {\n    \n    private static\
    \ List<String> listOfTerms;\n    private static List<String> listOfDefinitions;\n\
    \    private static List<String> listOfAddedDefinitions;\n    private static List<String>\
    \ listOfRemovedDefinitions;\n    \n    @BeforeClass\n    public static void generateLists(){\n\
    \        listOfTerms = getListOfTerms();\n        listOfDefinitions = getListOfDefinitions();\n\
    \        listOfAddedDefinitions = getListOfWrongDefinitions1();\n        listOfRemovedDefinitions\
    \ = getListOfWrongDefinitions2();\n    }\n    \n    @DynamicTestingMethod\n  \
    \  CheckResult test1() {\n        TestedProgram main = new TestedProgram();\n\
    \        \n        String output = main.start().toLowerCase().trim();\n      \
    \  if (!output.startsWith(\"input\")) {\n            return CheckResult.wrong(\"\
    Your program should prompt the user with the message \\\"Input the number of \"\
    \ +\n                    \"cards:\\\"\");\n        }\n        \n        return\
    \ CheckResult.correct();\n    }\n    \n    //Test where user gets the correct\
    \ definition\n    @DynamicTestingMethod\n    CheckResult test2() {\n        TestedProgram\
    \ main = new TestedProgram();\n        main.start();\n    \n        String output;\n\
    \        String term;\n        String definition;\n        String lineOne;\n \
    \       String[] lines;\n        \n        int numberOfTimes = listOfTerms.size();\n\
    \        output = main.execute(numberOfTimes + \"\").toLowerCase().trim();\n \
    \       \n        for (int i = 0; i < numberOfTimes; i++) {\n            term\
    \ = listOfTerms.get(i);\n            definition = listOfDefinitions.get(i);\n\
    \            \n            int cardNumber = i + 1;\n            if (!output.startsWith(\"\
    card #\" + cardNumber)) {\n                return CheckResult.wrong(\"Your program\
    \ should print \\\"Card #n\\\", where n is the index number of the \" +\n    \
    \                    \"card to be created\");\n            }\n            \n \
    \           output = main.execute(term).toLowerCase().trim();\n            if\
    \ (!output.startsWith(\"the definition for card #\" + cardNumber)) {\n       \
    \         return CheckResult.wrong(\"Your program should print \\\"The definition\
    \ for card #n\\\" after saving the \" +\n                        \"term entered\
    \ by the user.\");\n            }\n            \n            output = main.execute(definition).toLowerCase().trim();\n\
    \        }\n        \n        for (int i = 0; i < numberOfTimes; i++) {\n    \
    \        term = listOfTerms.get(i);\n            definition = listOfDefinitions.get(i);\n\
    \            \n            if (!output.contains(\"\\\"\" + term + \"\\\"\")) {\n\
    \                return CheckResult.wrong(\"Your program should print the definition\
    \ requested in quotes\");\n            }\n            \n            if (!output.contains(\"\
    definition\")) {\n                return CheckResult.wrong(\"Your program should\
    \ prompt the user for the definition of a card with the message \" +\n       \
    \                 \"\\\" Print the definition of \\\"term\\\": where \\\"term\\\
    \" is the term of the flashcard to be checked\");\n            }\n           \
    \ \n            output = main.execute(definition).toLowerCase().trim();\n    \
    \        \n            lines = output.split(\"\\n\");\n            lineOne = lines[0];\n\
    \            \n            if (!lineOne.equals(\"correct!\")) {\n            \
    \    return CheckResult.wrong(\"Your program should print \\\"Correct!\\\" if\
    \ the user inputs the correct \" +\n                        \"definition\");\n\
    \            }\n            \n            if (i != (numberOfTimes -1)) {\n   \
    \             \n                if (lines.length != 2) {\n                   \
    \ return CheckResult.wrong(\"Your program should give feedback to the user on\
    \ one line and the \" +\n                            \"next question on the next\
    \ line\");\n                }\n                \n                output = lines[1].trim();\n\
    \            }\n            \n        }\n        \n        \n        return CheckResult.correct();\n\
    \        \n    }\n    \n    //Test to check if the user's program saves an existing\
    \ card\n    @DynamicTestingMethod\n    CheckResult test3() {\n        TestedProgram\
    \ main = new TestedProgram();\n        main.start();\n        String output;\n\
    \        \n        main.execute(\"4\");\n        main.execute(\"print()\");\n\
    \        main.execute(\"outputs text\");\n        \n        output = main.execute(\"\
    print()\").toLowerCase();\n        if (!output.contains(\"\\\"print()\\\" already\
    \ exists\")) {\n            return CheckResult.wrong(\"Your program should not\
    \ add a term that already exists and should notify the \" +\n                \
    \    \"user with the message \\\"The term 'term' already exists. Try again:\\\"\
    \");\n        }\n    \n    \n        main.execute(\"son\");\n        main.execute(\"\
    a male child\");\n        \n        main.execute(\"str()\");\n        main.execute(\"\
    converts to a string\");\n        \n        main.execute(\"daughter\");\n    \
    \    output = main.execute(\"a male child\");\n        if (!output.contains(\"\
    \\\"a male child\\\" already exists\")) {\n            return CheckResult.wrong(\"\
    Your program should not add a definition that already exists and should notify\
    \ \" +\n                    \"the user with the message \\\"The definition 'definition'\
    \ already exists. Try again:\\\"\");\n        }\n        \n        return CheckResult.correct();\n\
    \    }\n    \n    //Test to check if the program's output are in separate lines\n\
    \    @DynamicTestingMethod\n    CheckResult test4() {\n        TestedProgram main\
    \ = new TestedProgram();\n        main.start();\n        \n        main.execute(\"\
    2\");\n        main.execute(\"print()\");\n        main.execute(\"outputs text\"\
    );\n        main.execute(\"print()\");\n        main.execute(\"str()\");\n   \
    \     main.execute(\"outputs text\");\n        main.execute(\"converts to a string\"\
    );\n        main.execute(\"outputs text\");\n        main.execute(\"converts to\
    \ a string\");\n        \n        return null;\n    }\n    \n    //Test where\
    \ user enters a definition for another term.\n    @DynamicTestingMethod\n    CheckResult\
    \ test5() {\n        TestedProgram main = new TestedProgram();\n        main.start();\n\
    \    \n        String output;\n        String lineOne;\n        String[] lines;\n\
    \        String term;\n        \n        int numberOfTimes = listOfTerms.size();\n\
    \        output = main.execute(numberOfTimes + \"\").toLowerCase().trim();\n \
    \       \n        \n        for (int i = 0; i < numberOfTimes; i++) {\n      \
    \      term = listOfTerms.get(i);\n            \n            int cardNumber =\
    \ i + 1;\n            if (!output.startsWith(\"card #\" + cardNumber)) {\n   \
    \             return CheckResult.wrong(\"Your program should print \\\"Card #n\\\
    \", where n is the index number of the \" +\n                        \"card to\
    \ be created\");\n            }\n            \n            output = main.execute(term).toLowerCase().trim();\n\
    \            if (!output.startsWith(\"the definition for card #\" + cardNumber))\
    \ {\n                return CheckResult.wrong(\"Your program should print \\\"\
    The definition for card #n\\\" after saving the \" +\n                       \
    \ \"term entered by the user.\");\n            }\n            \n            output\
    \ = main.execute(listOfDefinitions.get(i)).toLowerCase().trim();\n        }\n\
    \        \n        for (int i = 0; i < numberOfTimes; i++) {\n            term\
    \ = listOfTerms.get(i);\n            \n            if (!output.contains(\"\\\"\
    \" + term + \"\\\"\")) {\n                return CheckResult.wrong(\"Your program\
    \ should print the definition requested in quotes\");\n            }\n       \
    \     \n            if (!output.contains(\"definition\")) {\n                return\
    \ CheckResult.wrong(\"Your program should prompt the user for the definition of\
    \ a card with the \" +\n                        \"message \\\" Print the definition\
    \ of \\\"term\\\": where \\\"term\\\" is the term of the flashcard to be checked\"\
    );\n            }\n            \n            //Swap the definitions of similar\
    \ terms\n            int index;\n            if (i % 2 == 0) {\n             \
    \   output = main.execute(listOfDefinitions.get(i + 1)).toLowerCase().trim();\n\
    \                index = i + 1;\n            } else {\n                output\
    \ = main.execute(listOfDefinitions.get(i - 1)).toLowerCase().trim();\n       \
    \         index = i - 1; \n            }\n            \n            \n       \
    \     lines = output.split(\"\\n\");\n            lineOne = lines[0];\n      \
    \      \n            if (!lineOne.contains(\"wrong. the right answer is \\\"\"\
    \ + listOfDefinitions.get(i) + \"\\\"\")) {\n                return CheckResult.wrong(\"\
    Your program should print \\\"Wrong.\\\" followed by the correct definition in\
    \ \" +\n                        \"quotes if the user inputs the wrong definition\"\
    );\n            }\n            \n            if (!lineOne.contains(\"correct for\
    \ \\\"\" + listOfTerms.get(index) + \"\\\"\")) {\n                return CheckResult.wrong(\"\
    Your output should also contain \\\"but your definition is correct for 'term'\"\
    \ +\n                        \" \\\"\");\n            }\n            \n      \
    \      if (i != (numberOfTimes -1)) {\n                \n                if (lines.length\
    \ != 2) {\n                    return CheckResult.wrong(\"Your program should\
    \ give feedback to the user on one line and the \" +\n                       \
    \     \"next question on the next line\");\n                }\n              \
    \  \n                output = lines[1].trim();\n            }\n            \n\
    \        }\n        \n        return CheckResult.correct();\n    }\n    \n   \
    \ //Test where user fails the definition by adding extra words that might invalidate\
    \ the definition\n    @DynamicTestingMethod\n    CheckResult test6() {\n     \
    \   TestedProgram main = new TestedProgram();\n        main.start();\n    \n \
    \       String output;\n        String term;\n        String definition;\n   \
    \     String lineOne;\n        String wrongDefinition;\n        String[] lines;\n\
    \        \n        \n        int numberOfTimes = listOfTerms.size();\n       \
    \ output = main.execute(numberOfTimes  + \"\").toLowerCase().trim();\n       \
    \ \n        for (int i = 0; i < numberOfTimes; i++) {\n            term = listOfTerms.get(i);\n\
    \            definition = listOfDefinitions.get(i);\n            \n          \
    \  int cardNumber = i + 1;\n            if (!output.startsWith(\"card #\" + cardNumber))\
    \ {\n                return CheckResult.wrong(\"Your program should print \\\"\
    Card #n\\\", where n is the index number of the \" +\n                       \
    \ \"card to be created\");\n            }\n            \n            output =\
    \ main.execute(term).toLowerCase().trim();\n            if (!output.startsWith(\"\
    the definition for card #\" + cardNumber)) {\n                return CheckResult.wrong(\"\
    Your program should print \\\"The definition for card #n\\\" after saving the\
    \ \" +\n                        \"term entered by the user.\");\n            }\n\
    \            \n            output = main.execute(definition).toLowerCase().trim();\n\
    \        }\n        \n        for (int i = 0; i < numberOfTimes; i++) {\n    \
    \        term = listOfTerms.get(i);\n            definition = listOfDefinitions.get(i);\n\
    \            wrongDefinition = listOfAddedDefinitions.get(i);\n            \n\
    \            if (!output.contains(\"\\\"\" + term + \"\\\"\")) {\n           \
    \     return CheckResult.wrong(\"Your program should print the definition requested\
    \ in quotes\");\n            }\n            \n            if (!output.contains(\"\
    definition\")) {\n                return CheckResult.wrong(\"Your program should\
    \ prompt the user for the definition of a card with the message \" +\n       \
    \                 \"\\\" Print the definition of \\\"term\\\": where \\\"term\\\
    \" is the term of the flashcard to be checked\");\n            }\n           \
    \ \n            output = main.execute(wrongDefinition).toLowerCase().trim();\n\
    \            \n            lines = output.split(\"\\n\");\n            lineOne\
    \ = lines[0];\n            \n            if (!lineOne.contains(\"wrong. the right\
    \ answer is \\\"\" + definition + \"\\\"\")) {\n                return CheckResult.wrong(\"\
    Your program should print \\\"Wrong\\\" followed by the correct definition in\
    \ \" +\n                        \"quotes if the user inputs the wrong definition\"\
    );\n            }\n            \n            if (i != (numberOfTimes -1)) {\n\
    \                \n                if (lines.length != 2) {\n                \
    \    return CheckResult.wrong(\"Your program should give feedback to the user\
    \ on one line and the \" +\n                            \"next question on the\
    \ next line\");\n                }\n                \n                output =\
    \ lines[1].trim();\n            }\n            \n        }\n        \n       \
    \ return CheckResult.correct();\n    }\n    \n    //Test where user fails the\
    \ definition by removing essential word that invalidates the definition\n    @DynamicTestingMethod\n\
    \    CheckResult test7() {\n        TestedProgram main = new TestedProgram();\n\
    \        main.start();\n        \n        String output;\n        String lineOne;\n\
    \        String term;\n        String definition;\n        String wrongDefinition;\n\
    \        String[] lines;\n        \n        int numberOfTimes = listOfTerms.size();\n\
    \        output = main.execute(numberOfTimes + \"\").toLowerCase().trim();\n \
    \       \n        for (int i = 0; i < numberOfTimes; i++) {\n            term\
    \ = listOfTerms.get(i);\n            definition = listOfDefinitions.get(i);\n\
    \            \n            int cardNumber = i + 1;\n            if (!output.startsWith(\"\
    card #\" + cardNumber)) {\n                return CheckResult.wrong(\"Your program\
    \ should print \\\"Card #n\\\", where n is the index number of the \" +\n    \
    \                    \"card to be created\");\n            }\n            \n \
    \           output = main.execute(term).toLowerCase().trim();\n            if\
    \ (!output.startsWith(\"the definition for card #\" + cardNumber)) {\n       \
    \         return CheckResult.wrong(\"Your program should print \\\"The definition\
    \ for card #n\\\" after saving the \" +\n                        \"term entered\
    \ by the user.\");\n            }\n            \n            output = main.execute(definition).toLowerCase().trim();\n\
    \        }\n        \n        for (int i = 0; i < numberOfTimes; i++) {\n    \
    \        term = listOfTerms.get(i);\n            definition = listOfDefinitions.get(i);\n\
    \            wrongDefinition = listOfRemovedDefinitions.get(i);\n            \n\
    \            if (!output.contains(\"\\\"\" + term + \"\\\"\")) {\n           \
    \     return CheckResult.wrong(\"Your program should print the definition requested\
    \ in quotes\");\n            }\n            \n            if (!output.contains(\"\
    definition\")) {\n                return CheckResult.wrong(\"Your program should\
    \ prompt the user for the definition of a card with the message \" +\n       \
    \                 \"\\\" Print the definition of \\\"term\\\": where \\\"term\\\
    \" is the term of the flashcard to be checked\");\n            }\n           \
    \ \n            output = main.execute(wrongDefinition).toLowerCase().trim();\n\
    \            \n            lines = output.split(\"\\n\");\n            lineOne\
    \ = lines[0];\n            \n            if (!lineOne.contains(\"wrong. the right\
    \ answer is \\\"\" + definition + \"\\\"\")) {\n                return CheckResult.wrong(\"\
    Your program should print \\\"Wrong\\\" followed by the correct definition in\
    \ \" +\n                        \"quotes if the user inputs the wrong definition\"\
    );\n            }\n            \n            if (i != (numberOfTimes -1)) {\n\
    \                \n                if (lines.length != 2) {\n                \
    \    return CheckResult.wrong(\"Your program should give feedback to the user\
    \ on one line and the \" +\n                            \"next question on the\
    \ next line\");\n                }\n                \n                output =\
    \ lines[1].trim();\n            }\n            \n        }\n        \n       \
    \ return CheckResult.correct();\n    }\n    \n    //Used to check if the program's\
    \ output are in separate lines. Uses in test 4\n    @Override\n    public CheckResult\
    \ check(String reply, String attach) {\n        String[] lines = reply.split(\"\
    \\n\");\n        \n        if (lines.length != 11)  {\n            return CheckResult.wrong(\"\
    Your program printed wrong number of lines. \" +\n                    \"Make sure\
    \ all your outputs are on separate lines\");\n        }\n        \n        return\
    \ CheckResult.correct();\n    }\n    \n    private static List<String> getListOfTerms()\
    \ {\n        return Arrays.asList(\n                \"print()\",\n           \
    \     \"str()\",\n                \"son\",\n                \"daughter\",\n  \
    \              \"uncle\",\n                \"ankle\");\n    }\n    \n    private\
    \ static List<String> getListOfDefinitions() {\n        return Arrays.asList(\n\
    \                \"outputs text\",\n                \"converts to a string\",\n\
    \                \"a male child\",\n                \"a female child\",\n    \
    \            \"a brother of one's parent\",\n                \"a part of the body\
    \ where the foot and the leg meet\"\n        );\n    }\n    \n    //Extra wrongs\
    \ invalidate the definition\n    private static List<String> getListOfWrongDefinitions1()\
    \ {\n        return Arrays.asList(\n                \"outputs text line by line\"\
    ,\n                \"converts to a string and an integer\",\n                \"\
    a male child or a female child\",\n                \"a female child or a male\
    \ child\",\n                \"a brother of one's parent or grandparents\",\n \
    \               \"a part of the body where the foot and the leg meet or the arm\"\
    \n        );\n    }\n    \n    //Essential words removed invalidates the definition\n\
    \    private static List<String> getListOfWrongDefinitions2() {\n        return\
    \ Arrays.asList(\n                \"outputs\",\n                \"converts a string\"\
    ,\n                \"a child\",\n                \"a child\",\n              \
    \  \"a brother of one\",\n                \"a part of the body where the foot\
    \ meet\"\n        );\n    }\n    \n}\n"
  learner_created: false
- name: src/flashcards/CardRepository.kt
  visible: true
  text: |-
    package flashcards

    import java.io.*
    import java.util.*
    import java.util.function.Consumer
    import java.util.stream.Collectors
    import java.util.stream.Stream
    import kotlin.collections.LinkedHashSet


    class CardsRepository(ui: UI) {
        private val cards: MutableSet<Card>
        private val ui: UI
        private val rnd: Random

        init {
            cards = LinkedHashSet()
            rnd = Random()
            this.ui = ui
        }

        fun cardsImport() {
            ui.println("File name:")
            val fileName= ui.nextLine()
            cardsImport(fileName)
        }

        fun cardsImport(fileName: String?) {
            try {
                Scanner(File(fileName)).use { sc ->
                    var count = 0
                    while (sc.hasNext()) {
                        val term  = sc.nextLine()
                        val definition = sc.nextLine()
                        val mistakes = sc.nextLine().toInt()
                        cards.add(Card(term, definition, mistakes))
                        ++count
                    }
                    ui.printf("%d cards have been loaded.%n", count)
                }
            } catch (e: FileNotFoundException) {
                ui.println("File not found.")
            }
        }

        fun cardsExport() {
            ui.println("File name:")
            val fileName = ui.nextLine()
            cardsExport(fileName)
        }

        fun cardsExport(fileName: String) {
            try {
                PrintWriter(FileWriter(fileName)).use { out ->
                    cards.forEach(Consumer { card: Card ->
                        out.println(card.term)
                        out.println(card.definition)
                        out.println(card.mistakes)
                    })
                }
            } catch (e: IOException) {
                ui.println(e.message)
            }
            ui.printf("%d cards have been saved.%n", cards.size)
        }

        fun remove() {
            ui.println("The card:")
            val term = ui.nextLine()
            cards.stream()
                .filter { c: Card -> c.term == term }
                .findFirst()
                .ifPresentOrElse(
                    { card: Card -> this.remove(card) }
                ) { ui.printf("Can't remove \"%s\": there is no such card.%n", term) }
        }

        private fun remove(card: Card) {
            cards.remove(card)
            ui.println("The card has been removed.")
        }

        fun add() {
            ui.println("The card:")
            val term = ui.nextLine()
            if (cards.stream().anyMatch { card: Card -> card.term == term }) {
                ui.printf("The card \"%s\" already exists.%n", term)
                return
            }
            ui.println("The definition of the card:")
            val definition = ui.nextLine()
            if (cards.stream().anyMatch { card: Card -> card.definition == definition }) {
                ui.printf("The definition \"%s\" already exists.%n", definition)
                return
            }
            cards.add(Card(term, definition, 0))
            ui.printf("The pair (\"%s\":\"%s\") has been added.%n", term, definition)
        }

        fun ask() {
            ui.println("How many times to ask?")
            val n: Int = ui.nextLine().toInt()
            val questions = cards.toTypedArray<Card>()
            Stream.generate {
                questions[rnd.nextInt(cards.size)]
            }.limit(n.toLong()).forEach { card: Card -> askCard(card) }
        }

        private fun askCard(card: Card) {
            ui.printf("Print the definition of \"%s\":%n", card.term)
            val answer = ui.nextLine()
            if (card.definition == answer) {
                ui.println("Correct answer.")
                return
            }
            card.increaseMistakes()
            cards.stream()
                .filter { x: Card -> x.definition == answer }
                .findFirst()
                .ifPresentOrElse(
                    { otherCard: Card ->
                        ui.printf(
                            "Wrong answer. The correct one is \"%s\", you've just written the definition of \"%s\".%n",
                            card.definition, otherCard.term
                        )
                    }
                ) { ui.printf("Wrong answer. The correct one is \"%s\".%n", card.definition) }
        }

        fun resetStats() {
            cards.forEach(Consumer { obj: Card -> obj.resetStats() })
            ui.println("Card statistics has been reset.")
        }

        fun hardestCard() {
            cards.stream()
                .mapToInt(Card::mistakes)
                .filter { mistakes: Int -> mistakes > 0 }
                .max()
                .ifPresentOrElse(
                    { maxMistakes: Int -> printHardestCards(maxMistakes) }
                ) { ui.println("There are no cards with errors.") }
        }

        private fun printHardestCards(maxMistakes: Int) {
            ui.printf("The hardest card%s %s. You have %d error%s answering them.",
                if (cards.stream()
                        .filter { card: Card -> card.mistakes == maxMistakes }
                        .count() == 1L
                ) " is" else "s are",
                cards.stream()
                    .filter { card: Card -> card.mistakes == maxMistakes }
                    .map { card: Card ->
                        String.format(
                            "\"%s\"",
                            card.term
                        )
                    }
                    .collect(Collectors.joining(", ")),
                maxMistakes, if (maxMistakes > 1) "s" else "")
        }
    }
  learner_created: true
- name: src/flashcards/UI.kt
  visible: true
  text: |-
    package flashcards

    import java.io.FileWriter
    import java.io.IOException
    import java.io.PrintWriter
    import java.util.*
    import java.util.function.Consumer
    import kotlin.collections.ArrayList


    class UI {
        private val sc: Scanner = Scanner(System.`in`)
        private val log: MutableList<String?> = ArrayList()
        fun printf(format: String?, vararg args: Any?) {
            val line = String.format(format!!, *args)
            println(line)
        }

        fun println(line: String?) {
            kotlin.io.println(line)
            log.add(line)
        }

        fun nextLine(): String {
            val line = sc.nextLine()
            log.add(line)
            return line
        }

        fun saveLog() {
            println("File name:")
            try {
                PrintWriter(FileWriter(nextLine())).use { out ->
                    log.forEach(Consumer { x: String? ->
                        out.println(
                            x
                        )
                    })
                }
            } catch (e: IOException) {
                println(e.message)
            }
            println("The log has been saved.")
        }
    }
  learner_created: true
- name: src/flashcards/Card.kt
  visible: true
  text: |-
    package flashcards


    class Card(val term: String, val definition: String, var mistakes: Int) {

        fun resetStats() {
            mistakes = 0
        }

        fun increaseMistakes() {
            ++mistakes
        }
    }
  learner_created: true
- name: src/flashcards/App.kt
  visible: true
  text: |-
    package flashcards

    import java.util.*


    class App (args: Array<String>) : Runnable {
        private val ui: UI = UI()
        private val repository: CardsRepository = CardsRepository(ui)
        private var importFileName = Optional.empty<String>()
        private var exportFileName = Optional.empty<String>()

        init {
            parseArgs(*args)
        }

        override fun run() {
            importFileName.ifPresent { fileName: String ->
                repository.cardsImport(
                    fileName
                )
            }
            menu()
            exportFileName.ifPresent { fileName: String ->
                repository.cardsExport(
                    fileName
                )
            }
        }

        fun menu() {
            do {
                ui.println("Input the action (add, remove, import, export, ask, log, hardest card, reset stats, exit):")
                val action = ui.nextLine().lowercase(Locale.getDefault())
                when (action) {
                    ACTION_ADD -> repository.add()
                    ACTION_REMOVE -> repository.remove()
                    ACTION_IMPORT -> repository.cardsImport()
                    ACTION_EXPORT -> repository.cardsExport()
                    ACTION_ASK -> repository.ask()
                    ACTION_LOG -> ui.saveLog()
                    ACTION_HARDEST_CARD -> repository.hardestCard()
                    ACTION_RESET_STATS -> repository.resetStats()
                    ACTION_EXIT -> {
                        ui.println("Bye bye!")
                        return
                    }

                    else -> ui.println("The action is not recognized.")
                }
            } while (true)
        }

        fun parseArgs(vararg args: String) {
            var i = 0
            while (i < args.size) {
                if (CLI_IMPORT == args[i]) {
                    importFileName = Optional.ofNullable(args[i + 1])
                }
                if (CLI_EXPORT == args[i]) {
                    exportFileName = Optional.ofNullable(args[i + 1])
                }
                i += 2
            }
        }

        companion object {
            private const val ACTION_ADD = "add"
            private const val ACTION_REMOVE = "remove"
            private const val ACTION_IMPORT = "import"
            private const val ACTION_EXPORT = "export"
            private const val ACTION_ASK = "ask"
            private const val ACTION_LOG = "log"
            private const val ACTION_HARDEST_CARD = "hardest card"
            private const val ACTION_RESET_STATS = "reset stats"
            private const val ACTION_EXIT = "exit"
            private const val CLI_IMPORT = "-import"
            private const val CLI_EXPORT = "-export"
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/83/stages/460/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 26 Aug 2023 13:44:37 UTC"
record: 4
